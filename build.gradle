import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.springframework.boot.gradle.tasks.bundling.BootJar

buildscript {
	ext {
		kotlinVersion = "1.9.24"
		springBootVersion = "3.3.2"
		springDependencyManagement = "1.1.6"
		apacheCommonsVersion = "2.16.1"
		jakartaInjectApiVersion = "2.0.1"
		JwtVersion = "0.12.3"
		assertjVersion = "3.26.3"
		mockkVersion = "1.13.12"
		springmockkVersion = "4.0.2"
		kotlinFakerVersion = "1.9.0"
		ktlint = "12.1.1"
	}
}

plugins {
	id("org.jetbrains.kotlin.jvm") version "$kotlinVersion" apply false
	id("org.jetbrains.kotlin.plugin.spring") version "$kotlinVersion" apply false
	id("org.springframework.boot") version "$springBootVersion" apply false
	id("io.spring.dependency-management") version "$springDependencyManagement" apply false
	id("org.jetbrains.kotlin.plugin.jpa") version "$kotlinVersion" apply false
	id("org.jlleitschuh.gradle.ktlint") version "$ktlint" apply false
	id("jacoco")
	id("org.sonarqube") version "4.4.1.3373" apply false
}


allprojects {
	repositories {
		mavenLocal()
		mavenCentral()
	}
}

subprojects {
	version = "0.0.1-SNAPSHOT"

	apply plugin: "idea"
	apply plugin: "kotlin"
	apply plugin: "org.jetbrains.kotlin.jvm"
	apply plugin: "org.jetbrains.kotlin.plugin.spring"
	apply plugin: "org.springframework.boot"
	apply plugin: "io.spring.dependency-management"
	apply plugin: "org.jetbrains.kotlin.plugin.jpa"
	apply plugin: "org.jlleitschuh.gradle.ktlint"
	apply plugin: "org.sonarqube"
	apply plugin: "jacoco"

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	dependencies {
		implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
		implementation "org.jetbrains.kotlin:kotlin-reflect"
		implementation "commons-io:commons-io:$apacheCommonsVersion"
		implementation "jakarta.inject:jakarta.inject-api:$jakartaInjectApiVersion"
		implementation "io.jsonwebtoken:jjwt-api:$JwtVersion"
		implementation "io.jsonwebtoken:jjwt-impl:$JwtVersion"
		implementation "io.jsonwebtoken:jjwt-jackson:$JwtVersion"
		implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core"

		implementation "org.springframework.boot:spring-boot-starter-data-jpa"
		implementation "org.springframework.boot:spring-boot-starter-security"
		implementation "org.springframework.boot:spring-boot-starter-validation"
		implementation "io.github.serpro69:kotlin-faker:$kotlinFakerVersion"
		runtimeOnly "org.postgresql:postgresql"

		testImplementation "org.springframework.boot:spring-boot-starter-test"
		testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"
		testImplementation "io.mockk:mockk-jvm:$mockkVersion"
		testImplementation "org.springframework.security:spring-security-test"
		testImplementation "org.assertj:assertj-core:$assertjVersion"
		testImplementation "com.ninja-squad:springmockk:$springmockkVersion"
		testRuntimeOnly "org.junit.platform:junit-platform-launcher"
	}

	java {
		toolchain {
			languageVersion.set(JavaLanguageVersion.of(JavaVersion.VERSION_17.toString()))
		}
	}

	kotlin {
		jvmToolchain {
			languageVersion.set(JavaLanguageVersion.of(JavaVersion.VERSION_17.toString()))
		}
	}

	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}

	jacocoTestReport {
		dependsOn test

		classDirectories.setFrom fileTree(dir: "build/classes/kotlin/main/")
				.exclude(
						"**/app/**",
						"**/*Configuration**",
						"**/adapters/**",
						"**/entity/**",
						"**/faker/**",
						"**/exception/**",
						"**/*UpdateUseCase**",
						"**/*DeletionUseCase**",
				)

		reports {
			xml.required = true
			csv.required = false
			html.required = true
			html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
		}
	}

	sonar {
		properties {
			property "sonar.projectKey", "fabianogoes_fiap-hackthon-health-med"
			property "sonar.organization", "fabianogoes"
			property "sonar.host.url", "https://sonarcloud.io"
		}
	}

	tasks.withType(KotlinCompile).configureEach {
		compilerOptions {
			freeCompilerArgs.add("-Xjsr305=strict")
			jvmTarget.set(JvmTarget.JVM_17)
		}
	}

	tasks.withType(BootJar).tap {
		configureEach {
			mainClass.set("com.fiap.hackthon.healthmed.app.AppRunKt")  // Use mainClass em vez de mainClassName
		}
	}
}